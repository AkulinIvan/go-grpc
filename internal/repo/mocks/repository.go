// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/AkulinIvan/grpc/internal/repo"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *Repository) CreateUser(ctx context.Context, user *repo.User) (int, error) {
	ret := _m.Called(ctx, user)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *repo.User) int); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *repo.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRefreshToken provides a mock function with given fields: ctx, userID
func (_m *Repository) DeleteRefreshToken(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPassword provides a mock function with given fields: ctx, userID
func (_m *Repository) GetPassword(ctx context.Context, userID int64) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshToken provides a mock function with given fields: ctx, userID
func (_m *Repository) GetRefreshToken(ctx context.Context, userID int64) (string, error) {
	ret := _m.Called(ctx, userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Repository) GetUserByUsername(ctx context.Context, username string) (*repo.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *repo.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *repo.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repo.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshToken provides a mock function with given fields: ctx, userID, token, expiresAt
func (_m *Repository) NewRefreshToken(ctx context.Context, userID int64, token string, expiresAt time.Time) error {
	ret := _m.Called(ctx, userID, token, expiresAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, time.Time) error); ok {
		r0 = rf(ctx, userID, token, expiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, userID, newPassword
func (_m *Repository) UpdatePassword(ctx context.Context, userID int64, newPassword string) error {
	ret := _m.Called(ctx, userID, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userID, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefreshToken provides a mock function with given fields: ctx, userID, oldToken, newToken, newExpiresAt
func (_m *Repository) UpdateRefreshToken(ctx context.Context, userID int64, oldToken string, newToken string, newExpiresAt time.Time) error {
	ret := _m.Called(ctx, userID, oldToken, newToken, newExpiresAt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, time.Time) error); ok {
		r0 = rf(ctx, userID, oldToken, newToken, newExpiresAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
